#!/bin/bash

# Run the chosen transformation, and optionally generate sample files with
# multiple self-contained documents in it, and split into individual files

# An extended version that can handle multiple input files correctly.

usage() {
    echo >&2 "Usage: `basename $0` -t transformation [-s] [-m] [-n <number>] <filename>"
    if ! test -z $1
    then
        echo >&2 "Valid transformations are PRISMA, IIMP or IIPA"
    fi
    exit 1
}

# Output to a directory in the current user's HOME directory. If it doesn't already
# exist, create it.

#XMLDIR="${HOME}/xml_handover"
XMLDIR="/dc/scratch"
if ! test -d ${XMLDIR}
then
    echo >&2 "Creating output directory structure..."
    mkdir ${XMLDIR}
    mkdir -p ${XMLDIR}/{prisma,iimp,iipa}/split/schemaValid
fi

# BASEPATH holds the directory name where this script is run from. It expects
# that all other required scripts are in the same directory.
BASEPATH=`dirname $0`

do_prisma() {
    local FILE=$1
    local OUTFILE="`set_outfile prisma`_single.xml"
    test_file ${FILE}
    ${BASEPATH}/ds_prisma_conversion.py ${NUM} ${FILE} > ${OUTFILE}
    
    # If the conversion script succeeds, go on to split it. Otherwise, 
    # write the file's name to a log file and continue.
    if test "x${?}" = "x0"
    then
        echo >&2 "Fixing entity references..."
        ${BASEPATH}/tidy_ampersands.py ${OUTFILE}
        test "x${MULTIPLE}" = "xTRUE" && do_multiple prisma ${OUTFILE}
        test "x${SPLIT}" = "xTRUE" && do_split prisma
    else
        echo "${FILE}" >> ~/transform_prisma_errors.txt
    fi
}

do_iimp() {
    local FILE=$1
    OUTFILE="`set_outfile iimp`_single.xml"
    do_impa ${FILE} ${OUTFILE} iimp
}

do_iipa() {
    local FILE=$1
    local OUTFILE="`set_outfile iipa`_single.xml"
    do_impa ${FILE} ${OUTFILE} iipa
}

do_impa() {
    local FILE=$1
    local OUTFILE=$2
    trans=$3
    test_file ${FILE}
    ${BASEPATH}/ds_impa_conversion.py ${NUM} ${FILE} > ${OUTFILE}

    if test "x${?}" = "x0"
    then
        echo >&2 "Fixing entity references..."
        ${BASEPATH}/tidy_ampersands.py ${OUTFILE}
        ${BASEPATH}/impa_clean_tags.py ${OUTFILE} > ${OUTFILE}.cleaned
        mv ${OUTFILE}.cleaned ${OUTFILE}
        test "x${MULTIPLE}" = "xTRUE" && do_multiple ${trans} ${OUTFILE}
        test "x${SPLIT}" = "xTRUE" && do_split ${trans}
    else
        echo "${FILE}" >> ~/transform_${trans}_errors.txt
    fi
}

do_bp() {
    echo "Process BP data here..."
}

do_loop() {
    SRC=${1}
    echo >&2 "Process a transformation in a loop in ${SRC}"
    for f in `ls ${SRC}/*.xml`
    do
    echo >&2 $(basename ${f})
        ${TRANSFORM} ${f}
    done
}

do_multiple() {
    echo >&2 "Splitting file to multiple XML docs..."
    local MULTIFILE="`set_outfile ${1}`.xml"
    ${BASEPATH}/multiple_xml_docs.py ${OUTFILE} > ${MULTIFILE}
}

do_split() {
    echo >&2 "Splitting data into individual files..."
    SPLITDIR="/dc/scratch/${1}/helios1/extracted"
    ${BASEPATH}/quick_split.py ${OUTFILE} ${SPLITDIR}
    test "x${MAKEBATCH}" = "xTRUE" && do_batch ${1}
}

do_batch() {
    SRCDIR="/dc/scratch/${1}/helios1/extracted"
    DSTDIR="/dc/scratch/${1}/helios1/handover"
    ${BASEPATH}/generate_helios_files.py ${1} ${SRCDIR} ${DSTDIR}
}

set_outfile() {
    echo "${XMLDIR}/${1}/helios1/pre/`basename ${FILE%.xml}`"
}

test_file() {
    if test -z ${1}
    then
        echo "No file to work on"
        exit 56
    fi
}

while getopts 't:n:msg' flag
do
    case ${flag} in
    t)  case ${OPTARG} in
        "PRISMA")  TRANSFORM="do_prisma"; shift $((OPTIND-1)); OPTIND=1 ;;
        "IIMP")    TRANSFORM="do_iimp"; shift $((OPTIND-1)); OPTIND=1 ;;
        "IIPA")    TRANSFORM="do_iipa"; shift $((OPTIND-1)); OPTIND=1 ;;
        *) usage ${OPTARG} ;;
        esac
        ;;
    n)  if ! $(echo ${OPTARG} | egrep "[0-9]+" 2>&1 > /dev/null)
        then
            echo "${OPTARG} is not a number!"
            exit 4
        else
            NUM=${OPTARG}
        fi
        shift $((OPTIND-1)); OPTIND=1;;
    m)  MULTIPLE=TRUE; shift $((OPTIND-1)); OPTIND=1 ;;
    s)  SPLIT=TRUE; shift $((OPTIND-1)); OPTIND=1 ;;
    g)  MAKEBATCH=TRUE; shift $((OPTIND-1)); OPTIND=1 ;;
    *)  usage ;;
    esac
done

SRC=${1}

# Check to see if $SRC is set
if test -z ${SRC}
then
    echo "No file to work with"
    exit 2
fi

# Now check if it contains a path to a file or a directory, and fork off to
# handle it accordingly.
if test -d ${SRC}
then
    do_loop ${SRC}
elif test -f ${SRC}
then
    ${TRANSFORM} ${SRC}
else
    echo >&2 "File or directory ${SRC} does not exist"
    exit 5
fi

#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1219143486.043659
__CHEETAH_genTimestamp__ = 'Tue Aug 19 11:58:06 2008'
__CHEETAH_src__ = 'jj_record_template.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Aug 19 11:57:48 2008'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class jj_record_template(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def maintag(self, tag, **KWS):



        ## CHEETAH: generated from #def maintag($tag) at line 146, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        outputtext = VFFSL(SL,"tag.content",True)
        if VFFSL(SL,"tag.sfl",True) != '': # generated from line 148, col 1
            outputtext = '<sfl>' + VFFSL(SL,"outputtext",True) + '</sfl>'
        if VFFSL(SL,"tag.display",True) != '': # generated from line 151, col 1
            outputtext = '<main display="' + VFFSL(SL,"tag.display",True) + '">' + VFFSL(SL,"outputtext",True) + '</main>'
        else: # generated from line 153, col 1
            outputtext = '<main>' + VFFSL(SL,"outputtext",True) + '</main>'
        _v = VFFSL(SL,"outputtext",True) # '$outputtext' on line 156, col 1
        if _v is not None: write(_filter(_v, rawExpr='$outputtext')) # from line 156, col 1.
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # filter EncodeUnicode
        write('''<document>
  <collection>''')
        _v = VFFSL(SL,"collection",True) # '$collection' on line 3, col 15
        if _v is not None: write(_filter(_v, rawExpr='$collection')) # from line 3, col 15.
        write('''</collection>
  <itemid>''')
        _v = VFFSL(SL,"recid",True) # '$recid' on line 4, col 11
        if _v is not None: write(_filter(_v, rawExpr='$recid')) # from line 4, col 11.
        write('''</itemid>
  <allegroid>''')
        _v = VFFSL(SL,"allegroid",True) # '$allegroid' on line 5, col 14
        if _v is not None: write(_filter(_v, rawExpr='$allegroid')) # from line 5, col 14.
        write('''</allegroid>
  <display>
    <all>
      <catalog>
''')
        for field in VFFSL(SL,"search.keys",True): # generated from line 9, col 1
            write('''        <''')
            _v = VFFSL(SL,"field",True) # '$field' on line 10, col 10
            if _v is not None: write(_filter(_v, rawExpr='$field')) # from line 10, col 10.
            write('''>
''')
            for tag in VFFSL(SL,"search",True)[VFFSL(SL,"field",True)]: # generated from line 11, col 1
                if VFFSL(SL,"tag.sortatt",True) != '': # generated from line 12, col 1
                    write('''          <''')
                    _v = VFFSL(SL,"tag.xmlname",True) # '$tag.xmlname' on line 13, col 12
                    if _v is not None: write(_filter(_v, rawExpr='$tag.xmlname')) # from line 13, col 12.
                    write(""" sort='""")
                    _v = VFFSL(SL,"tag.sortatt",True) # '$tag.sortatt' on line 13, col 31
                    if _v is not None: write(_filter(_v, rawExpr='$tag.sortatt')) # from line 13, col 31.
                    write("""'>
""")
                else: # generated from line 14, col 1
                    write('''          <''')
                    _v = VFFSL(SL,"tag.xmlname",True) # '$tag.xmlname' on line 15, col 12
                    if _v is not None: write(_filter(_v, rawExpr='$tag.xmlname')) # from line 15, col 12.
                    write('''>
''')
                write('''            ''')
                _v = VFFSL(SL,"maintag",False)(VFFSL(SL,"tag",True)) # '$maintag($tag)' on line 17, col 13
                if _v is not None: write(_filter(_v, rawExpr='$maintag($tag)')) # from line 17, col 13.
                write('''
''')
                if VFFSL(SL,"tag.approx",True) != '': # generated from line 18, col 1
                    write('''            <approx>''')
                    _v = VFFSL(SL,"tag.approx",True) # '$tag.approx' on line 19, col 21
                    if _v is not None: write(_filter(_v, rawExpr='$tag.approx')) # from line 19, col 21.
                    write('''</approx>
''')
                if VFFSL(SL,"tag.startdate",True) != '': # generated from line 21, col 1
                    write('''            <startdate type="int32">''')
                    _v = VFFSL(SL,"tag.startdate",True) # '$tag.startdate' on line 22, col 37
                    if _v is not None: write(_filter(_v, rawExpr='$tag.startdate')) # from line 22, col 37.
                    write('''</startdate>
''')
                if VFFSL(SL,"tag.enddate",True) != '': # generated from line 24, col 1
                    write('''            <enddate type="int32">''')
                    _v = VFFSL(SL,"tag.enddate",True) # '$tag.enddate' on line 25, col 35
                    if _v is not None: write(_filter(_v, rawExpr='$tag.enddate')) # from line 25, col 35.
                    write('''</enddate>
''')
                if VFFSL(SL,"tag.shelfbrowse",True) != '': # generated from line 27, col 1
                    write('''            <shelfmark_browse>''')
                    _v = VFFSL(SL,"tag.shelfbrowse",True) # '$tag.shelfbrowse' on line 28, col 31
                    if _v is not None: write(_filter(_v, rawExpr='$tag.shelfbrowse')) # from line 28, col 31.
                    write('''</shelfmark_browse>
''')
                if VFFSL(SL,"tag.shelfsort",True) != '': # generated from line 30, col 1
                    write('''            <shelfmark_sort>''')
                    _v = VFFSL(SL,"tag.shelfsort",True) # '$tag.shelfsort' on line 31, col 29
                    if _v is not None: write(_filter(_v, rawExpr='$tag.shelfsort')) # from line 31, col 29.
                    write('''</shelfmark_sort>
''')
                if VFFSL(SL,"tag.imageid",True) != '': # generated from line 33, col 1
                    write('''            <imageitemid>''')
                    _v = VFFSL(SL,"tag.imageid",True) # '$tag.imageid' on line 34, col 26
                    if _v is not None: write(_filter(_v, rawExpr='$tag.imageid')) # from line 34, col 26.
                    write('''</imageitemid>
''')
                if VFFSL(SL,"tag.mountid",True) != '': # generated from line 36, col 1
                    write('''            <mountimageid>''')
                    _v = VFFSL(SL,"tag.mountid",True) # '$tag.mountid' on line 37, col 27
                    if _v is not None: write(_filter(_v, rawExpr='$tag.mountid')) # from line 37, col 27.
                    write('''</mountimageid>
''')
                if VFFSL(SL,"tag.subtags",True) != None: # generated from line 39, col 1
                    for subtag in VFFSL(SL,"tag.subtags",True): # generated from line 40, col 1
                        if hasattr(VFFSL(SL,"subtag",True), 'display'): # generated from line 41, col 1
                            write('''            <''')
                            _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 42, col 14
                            if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 42, col 14.
                            write(''' display="''')
                            _v = VFFSL(SL,"subtag.display",True) # '$subtag.display' on line 42, col 39
                            if _v is not None: write(_filter(_v, rawExpr='$subtag.display')) # from line 42, col 39.
                            write('''">''')
                            _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 42, col 56
                            if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 42, col 56.
                            write('''</''')
                            _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 42, col 73
                            if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 42, col 73.
                            write('''>
''')
                        else: # generated from line 43, col 1
                            write('''            <''')
                            _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 44, col 14
                            if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 44, col 14.
                            write('''>''')
                            _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 44, col 30
                            if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 44, col 30.
                            write('''</''')
                            _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 44, col 47
                            if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 44, col 47.
                            write('''>
''')
                write('''          </''')
                _v = VFFSL(SL,"tag.xmlname",True) # '$tag.xmlname' on line 48, col 13
                if _v is not None: write(_filter(_v, rawExpr='$tag.xmlname')) # from line 48, col 13.
                write('''>
''')
            write('''        </''')
            _v = VFFSL(SL,"field",True) # '$field' on line 50, col 11
            if _v is not None: write(_filter(_v, rawExpr='$field')) # from line 50, col 11.
            write('''>
''')
        write('''        <name_keyword>
''')
        for tag in VFFSL(SL,"namesearch",True)['main']: # generated from line 53, col 1
            write('''          <''')
            _v = VFFSL(SL,"tag.xmlname",True) # '$tag.xmlname' on line 54, col 12
            if _v is not None: write(_filter(_v, rawExpr='$tag.xmlname')) # from line 54, col 12.
            write('''>
            ''')
            _v = VFFSL(SL,"maintag",False)(VFFSL(SL,"tag",True)) # '$maintag($tag)' on line 55, col 13
            if _v is not None: write(_filter(_v, rawExpr='$maintag($tag)')) # from line 55, col 13.
            write('''
''')
            if VFFSL(SL,"tag.subtags",True) != None: # generated from line 56, col 1
                for subtag in VFFSL(SL,"tag.subtags",True): # generated from line 57, col 1
                    if hasattr(VFFSL(SL,"subtag",True), 'display'): # generated from line 58, col 1
                        write('''            <''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 59, col 14
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 59, col 14.
                        write(''' display="''')
                        _v = VFFSL(SL,"subtag.display",True) # '$subtag.display' on line 59, col 39
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.display')) # from line 59, col 39.
                        write('''">''')
                        _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 59, col 56
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 59, col 56.
                        write('''</''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 59, col 73
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 59, col 73.
                        write('''>
''')
                    else: # generated from line 60, col 1
                        write('''            <''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 61, col 14
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 61, col 14.
                        write('''>''')
                        _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 61, col 30
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 61, col 30.
                        write('''</''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 61, col 47
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 61, col 47.
                        write('''>
''')
            write('''          </''')
            _v = VFFSL(SL,"tag.xmlname",True) # '$tag.xmlname' on line 65, col 13
            if _v is not None: write(_filter(_v, rawExpr='$tag.xmlname')) # from line 65, col 13.
            write('''>
''')
        write('''          <other>
''')
        for tag in VFFSL(SL,"namesearch",True)['other']: # generated from line 68, col 1
            write('''            <''')
            _v = VFFSL(SL,"tag.xmlname",True) # '$tag.xmlname' on line 69, col 14
            if _v is not None: write(_filter(_v, rawExpr='$tag.xmlname')) # from line 69, col 14.
            write('''>
              ''')
            _v = VFFSL(SL,"maintag",False)(VFFSL(SL,"tag",True)) # '$maintag($tag)' on line 70, col 15
            if _v is not None: write(_filter(_v, rawExpr='$maintag($tag)')) # from line 70, col 15.
            write('''
''')
            if VFFSL(SL,"tag.subtags",True) != None: # generated from line 71, col 1
                for subtag in VFFSL(SL,"tag.subtags",True): # generated from line 72, col 1
                    if hasattr(VFFSL(SL,"subtag",True), 'display'): # generated from line 73, col 1
                        write('''              <''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 74, col 16
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 74, col 16.
                        write(''' display="''')
                        _v = VFFSL(SL,"subtag.display",True) # '$subtag.display' on line 74, col 41
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.display')) # from line 74, col 41.
                        write('''">''')
                        _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 74, col 58
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 74, col 58.
                        write('''</''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 74, col 75
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 74, col 75.
                        write('''>
''')
                    else: # generated from line 75, col 1
                        write('''              <''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 76, col 16
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 76, col 16.
                        write('''>''')
                        _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 76, col 32
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 76, col 32.
                        write('''</''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 76, col 49
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 76, col 49.
                        write('''>
''')
            write('''            </''')
            _v = VFFSL(SL,"tag.xmlname",True) # '$tag.xmlname' on line 80, col 15
            if _v is not None: write(_filter(_v, rawExpr='$tag.xmlname')) # from line 80, col 15.
            write('''>
''')
        write('''          </other>
        </name_keyword>
      </catalog>
      <fulltext>''')
        _v = VFFSL(SL,"fulltext",True) # '$fulltext' on line 85, col 17
        if _v is not None: write(_filter(_v, rawExpr='$fulltext')) # from line 85, col 17.
        write('''</fulltext>
    </all>
''')
        for tag in VFFSL(SL,"display",True): # generated from line 87, col 1
            write('''    <''')
            _v = VFFSL(SL,"tag.xmlname",True) # '$tag.xmlname' on line 88, col 6
            if _v is not None: write(_filter(_v, rawExpr='$tag.xmlname')) # from line 88, col 6.
            write('''>
''')
            if VFFSL(SL,"tag.display",True) != '': # generated from line 89, col 1
                write('''      <main display="''')
                _v = VFFSL(SL,"tag.display",True) # '$tag.display' on line 90, col 22
                if _v is not None: write(_filter(_v, rawExpr='$tag.display')) # from line 90, col 22.
                write('''">''')
                _v = VFFSL(SL,"tag.content",True) # '$tag.content' on line 90, col 36
                if _v is not None: write(_filter(_v, rawExpr='$tag.content')) # from line 90, col 36.
                write('''</main>
''')
            else: # generated from line 91, col 1
                write('''      <main>''')
                _v = VFFSL(SL,"tag.content",True) # '$tag.content' on line 92, col 13
                if _v is not None: write(_filter(_v, rawExpr='$tag.content')) # from line 92, col 13.
                write('''</main>
''')
            if hasattr(VFFSL(SL,"tag",True), 'physcatother'): # generated from line 94, col 1
                write('''      <main display="none">other</main>
''')
            for subtag in VFFSL(SL,"tag.subtags",True): # generated from line 97, col 1
                if hasattr(VFFSL(SL,"subtag",True), 'display'): # generated from line 98, col 1
                    write('''      <''')
                    _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 99, col 8
                    if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 99, col 8.
                    write(''' display="''')
                    _v = VFFSL(SL,"subtag.display",True) # '$subtag.display' on line 99, col 33
                    if _v is not None: write(_filter(_v, rawExpr='$subtag.display')) # from line 99, col 33.
                    write('''">''')
                    _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 99, col 50
                    if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 99, col 50.
                    write('''</''')
                    _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 99, col 67
                    if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 99, col 67.
                    write('''>
''')
                else: # generated from line 100, col 1
                    write('''      <''')
                    _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 101, col 8
                    if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 101, col 8.
                    write('''>''')
                    _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 101, col 24
                    if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 101, col 24.
                    write('''</''')
                    _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 101, col 41
                    if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 101, col 41.
                    write('''>
''')
            write('''    </''')
            _v = VFFSL(SL,"tag.xmlname",True) # '$tag.xmlname' on line 104, col 7
            if _v is not None: write(_filter(_v, rawExpr='$tag.xmlname')) # from line 104, col 7.
            write('''>
''')
        write('''  </display>
  <somxml>
''')
        for field in VFFSL(SL,"som.keys",True): # generated from line 108, col 1
            if VFFSL(SL,"field",True) == 'som_shelfmarks': # generated from line 109, col 1
                write('''    <''')
                _v = VFFSL(SL,"field",True) # '$field' on line 110, col 6
                if _v is not None: write(_filter(_v, rawExpr='$field')) # from line 110, col 6.
                write('''>
''')
                for shelf in VFFSL(SL,"som",True)[VFFSL(SL,"field",True)]: # generated from line 111, col 1
                    write('''      <shelfmark>
        <main>''')
                    _v = VFFSL(SL,"shelf.content",True) # '$shelf.content' on line 113, col 15
                    if _v is not None: write(_filter(_v, rawExpr='$shelf.content')) # from line 113, col 15.
                    write('''</main>
      </shelfmark>
''')
                write('''    </''')
                _v = VFFSL(SL,"field",True) # '$field' on line 116, col 7
                if _v is not None: write(_filter(_v, rawExpr='$field')) # from line 116, col 7.
                write('''>
''')
            elif VFFSL(SL,"som",True)[VFFSL(SL,"field",True)] is not None: # generated from line 117, col 1
                write('''    <''')
                _v = VFFSL(SL,"field",True) # '$field' on line 118, col 6
                if _v is not None: write(_filter(_v, rawExpr='$field')) # from line 118, col 6.
                write('''>
      <''')
                _v = VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"xmlname",True) # '$som[$field].xmlname' on line 119, col 8
                if _v is not None: write(_filter(_v, rawExpr='$som[$field].xmlname')) # from line 119, col 8.
                write('''>
''')
                if VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"display",True) != '': # generated from line 120, col 1
                    write("""        <main display='""")
                    _v = VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"display",True) # '$som[$field].display' on line 121, col 24
                    if _v is not None: write(_filter(_v, rawExpr='$som[$field].display')) # from line 121, col 24.
                    write("""'>""")
                    _v = VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"content",True) # '$som[$field].content' on line 121, col 46
                    if _v is not None: write(_filter(_v, rawExpr='$som[$field].content')) # from line 121, col 46.
                    write('''</main>
''')
                else: # generated from line 122, col 1
                    write('''        <main>''')
                    _v = VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"content",True) # '$som[$field].content' on line 123, col 15
                    if _v is not None: write(_filter(_v, rawExpr='$som[$field].content')) # from line 123, col 15.
                    write('''</main>
''')
                if VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"startdate",True) != '': # generated from line 125, col 1
                    write('''        <startdate type="int32">''')
                    _v = VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"startdate",True) # '$som[$field].startdate' on line 126, col 33
                    if _v is not None: write(_filter(_v, rawExpr='$som[$field].startdate')) # from line 126, col 33.
                    write('''</startdate>
''')
                if VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"enddate",True) != '': # generated from line 128, col 1
                    write('''        <enddate type="int32">''')
                    _v = VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"enddate",True) # '$som[$field].enddate' on line 129, col 31
                    if _v is not None: write(_filter(_v, rawExpr='$som[$field].enddate')) # from line 129, col 31.
                    write('''</enddate>
''')
                for subtag in VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"subtags",True): # generated from line 131, col 1
                    if hasattr(VFFSL(SL,"subtag",True), 'display'): # generated from line 132, col 1
                        write('''        <''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 133, col 10
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 133, col 10.
                        write(''' display="''')
                        _v = VFFSL(SL,"subtag.display",True) # '$subtag.display' on line 133, col 35
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.display')) # from line 133, col 35.
                        write('''">''')
                        _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 133, col 52
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 133, col 52.
                        write('''</''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 133, col 69
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 133, col 69.
                        write('''>
''')
                    else: # generated from line 134, col 1
                        write('''        <''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 135, col 10
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 135, col 10.
                        write('''>''')
                        _v = VFFSL(SL,"subtag.content",True) # '$subtag.content' on line 135, col 26
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.content')) # from line 135, col 26.
                        write('''</''')
                        _v = VFFSL(SL,"subtag.xmlname",True) # '$subtag.xmlname' on line 135, col 43
                        if _v is not None: write(_filter(_v, rawExpr='$subtag.xmlname')) # from line 135, col 43.
                        write('''>
''')
                write('''      </''')
                _v = VFN(VFFSL(SL,"som",True)[VFFSL(SL,"field",True)],"xmlname",True) # '$som[$field].xmlname' on line 138, col 9
                if _v is not None: write(_filter(_v, rawExpr='$som[$field].xmlname')) # from line 138, col 9.
                write('''>
    </''')
                _v = VFFSL(SL,"field",True) # '$field' on line 139, col 7
                if _v is not None: write(_filter(_v, rawExpr='$field')) # from line 139, col 7.
                write('''>
''')
        write('''  </somxml>
</document>
''')
        # end filter
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_jj_record_template= 'respond'

## END CLASS DEFINITION

if not hasattr(jj_record_template, '_initCheetahAttributes'):
    templateAPIClass = getattr(jj_record_template, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(jj_record_template)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=jj_record_template()).run()



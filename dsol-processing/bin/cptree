#!/usr/local/bin/python2.6
# -*- mode: python -*-

import sys, os
sys.path.append(os.path.join(os.path.dirname(__file__) + '/../lib/python'))

import shutil
from optparse import OptionParser, OptionValueError

'''
Copy a directory tree anchored at <root> to <dest>, making all subdirectories 
necessary to satisfy the request.

The default action is to copy files in <root> that have the extension '.xml'.
The user can specify a different extension by passing the -e option with the
desired extension as its argument.
'''

optparser = OptionParser()
optparser.add_option('-r', dest='rootDir', default=None)
optparser.add_option('-d', dest='destDir', default=None)
optparser.add_option('-e', dest='ext', default='xml')
optparser.add_option('-v', dest='verbose', action='store_true', default=False)

(opts, args) = optparser.parse_args()

'''
Make sure we have both rootDir and destDir defined from the 
commandline
'''
if opts.rootDir is None or opts.destDir is None:
    print >> sys.stderr, "-r <root> -d <dest> -e <xml|jpg|tif>"
    exit(1)

if opts.ext not in ['xml', 'jpg', 'tif']:
    print >> sys.stderr, "%s: unsupported file type. Allowed types are 'xml', 'jpg' and 'tif'" % opts.ext
    exit(1)
'''
Iterate over the 3-tuples returned by os.walk()
In the inner loop, iterate over the filenames returned as the
third member of the 3-tuple.
'''

EXTS = {
    'xml': 'xml',
    'jpg': 'jpeg',
    'tif': 'tiff'}

for root, dirs, filenames in os.walk(opts.rootDir):
    for filename in filenames:
        if filename.endswith('.%s' % opts.ext):
            # The image filenames start with Vogue_, the xml files don't
            # Strip Vogue_ and then we can use the same approach to 
            # determine year and month from the filename.
            if filename.startswith('Vogue_'):
                fn = filename.replace('Vogue_', '')
            else:
                fn = filename
            year = fn[0:4]
            month = fn[4:6]
            destDir = os.path.join(opts.destDir, year, month, EXTS[opts.ext])
            
            if not os.path.isdir(destDir):
                if opts.verbose is True:
                    print >> sys.stderr, "Creating target directory %s" % destDir
                os.makedirs(destDir)
            if os.path.isfile("%s/%s" % (root, filename)):
                if opts.verbose is True:
                    print "%s/%s" % (destDir, filename,)
                shutil.copy("%s/%s" % (root, filename), "%s/%s" % (destDir, filename))
            else:
                print >> sys.stderr, "Err, something went wrong..."

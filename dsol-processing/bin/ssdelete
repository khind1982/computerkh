#!/usr/bin/env python
# -*- mode: python -*-

import sys, os, re
sys.path.append(os.path.join(os.path.dirname(__file__) + '/../lib/python'))
sys.path.append(os.path.join(os.path.dirname(__file__) + '/../lib'))
sys.path.append('../lib')

import getpass, pwd
from steadystatehandler import SteadyStateHandler, NotFoundError
from commonUtils import dateUtils

# Argument is a list of ids, either on the command line and separated by
# whitespace, or in a file and separated by newline.

#

hnp_product = ['eima']

class SteadyStateDeleter(object):
    def __init__(self):
        self.steadyStateHandler = SteadyStateHandler()

class ExplicitSteadyStateDeleter(SteadyStateDeleter):
    def __init__(self, product):
        SteadyStateDeleter.__init__(self)
        self.product = product
        #self.steadyStateHandler._dbPrepare(self.product)
    def markAsDeleted(self, objId):
        currentUser = pwd.getpwnam(getpass.getuser())[4]
        self.checkSum = "DELETED by " + currentUser
        try:
            tgtart = self.steadyStateHandler.find(objId)
            print tgtart
            self.steadyStateHandler.forceUpdate(objId, self.checkSum)
            #self.steadyStateHandler.updateChecksum(objId, self.checkSum)
        except NotFoundError:
            #self.steadyStateHandler.insertChecksum(objId, self.checkSum)
            pass

def objectList(thing):
    if os.path.isfile(str(thing[0])):
        return [objid.strip() for objid in open(thing[0]) if not re.match('^(#|$)', objid)]
    else:
        return thing

def legacyId(objId, product):
    nameComponents = [product, objId]
#    nameComponents = []
    if product.endswith('ft'):
        # Remove the ft flag
        product = product[0:-2]
        nameComponents[0] = product
    else:
        nameComponents.append('1')
    return '-'.join(nameComponents)

def legacyPlatform(product):
    if product in hnp_product:
        return 'HNP'
    else:
        return 'CH'

if __name__ == '__main__':
    if len(sys.argv) == 1:
        print >> sys.stderr, ("ssdelete <product> <objectlist>")
        exit(1)
    product = sys.argv[1]

    try:
        docList = objectList(sys.argv[2:])
    except IndexError:
        print >> sys.stderr, ("Not enough arguments!")
        exit(1)

    ssdel = ExplicitSteadyStateDeleter(product)

    lastUpdate = dateUtils.fourteenDigitDate()
    for objId in docList:
#        print objId
        ssdel.markAsDeleted(objId)

        print """
<?xml version="1.0" encoding="UTF-8"?>
<IngestRecord>
  <MinorVersion>3</MinorVersion>
  <ControlStructure>
    <ActionCode>delete</ActionCode>
    <LegacyPlatform>%s</LegacyPlatform>
    <LegacyID>%s</LegacyID>
    <LastLegacyUpdateTime>%s</LastLegacyUpdateTime>
  </ControlStructure>
</IngestRecord>""" % (legacyPlatform(), legacyId(objId, product), lastUpdate)

#!/usr/local/bin/python2.6
import os, sys, os.path
import re
from sys import stdout
import shutil


if (len(sys.argv) > 1):
    if len(sys.argv) == 1:
        print "Please enter 2 options. Or coords_fix for help"

else:
    print "Please make sure to enter at least 2 options. i.e. \"coords_fix option1 option2\""
    print "Option 1: The factor by which you would like to reduce the word co-ordinates. Recomended 2.5"
    print "Option 2: The full path to the data. eg: /dc/pao/pcift0/wherever/somewhere/h310 "
    print "all files will be backed up in ...*old folder so you can re-run the script if needs be"
    print "If you have to re-run the script make sure you remove the unwanted files and rename the directory..."
    print "  ... to its original name"
    exit()
    
path_= sys.argv[2]
factor = sys.argv[1] 
oldpath_ = "%sold" %path_

shutil.copytree(path_, oldpath_)

def walk(dir,meth):
    """ walks a directory, and meth on each file! """
    dir = os.path.abspath(dir)
#   print "DIR : %s" % (dir,)
    for file in [file for file in os.listdir(dir) if not file in [".",".."]]:
        nfile = os.path.join(dir,file)
        if os.path.isfile(nfile):
            meth(nfile)
        else:
            walk(nfile,meth)
 

def meth(file_):

    fileExt = file_[-3:]
    if not fileExt in ["XML", "xml"]: return        
    filedir="%s" % (file_) 
    newfile_="%s.new" % (file_) 
    oldfile_=open(file_, "r")
    filenew_=open(newfile_, "w")
    with open(newfile_, "w") as filenew_:
        for line in oldfile_:
            
            APS_tag=re.compile('(.*?)<APS_word pos="(.*?),(.*?),(.*?),(.*?)">(.*?)</APS_word>').search(line)
            if APS_tag:
                a_=int(APS_tag.group(2)) / float(factor)
                a_=str(a_).split('.')[0]
                b_=int(APS_tag.group(3)) / float(factor)
                b_=str(b_).split('.')[0]
                c_=int(APS_tag.group(4)) / float(factor)
                c_=str(c_).split('.')[0]
                d_=int(APS_tag.group(5)) / float(factor)
                d_=str(d_).split('.')[0]
    		
                newline="%s<APS_word pos=\"%s,%s,%s,%s\">%s</APS_word>\n" % (APS_tag.group(1), a_, b_, c_, d_, APS_tag.group(6))
                   
                filenew_.write(newline)
            else:
                filenew_.write(line)
        oldfile_.close()        
        
    os.unlink(file_)
    stdout.flush()    
    stdout.write("\rProcessing: %s    " % file_)

    shutil.move(newfile_, file_)


if __name__ == "__main__":

    walk(path_, meth)
    stdout.write("\rDone!                                                                                     \n")

#!/usr/local/bin/python2.6
import re
import os
import fnmatch
import string
from operator import itemgetter
import os, sys, os.path
import shutil

###

if (len(sys.argv) > 2):
    if len(sys.argv) == 1:
        print "Please enter at least 2 options to run or sort_files for help"

else:
    print "Usage: sort_file option1 option2 option3 option4"
    print "Option 1: Full path to files eg: /dc/pao/pcift0/wherever/somewhere/h310"
    print "Option 2: File extension. Eg. tif or txt"
    print "Option 3(optional): Start file number. eg: 172 (no leading zeros)"
    print "Option 4(optional): Start directory number. eg: 4 (no leading zeros)"
    print "Must include Option 3 AND Option 4"
    print "The script will copy all the sorted files to /send_out directory"
    print "Scipt will write a step-by-step example of what it did to tmp.txt"
    exit()
    
path_= sys.argv[1]
pattern = "*.%s" % sys.argv[2]

try:
    if sys.argv[4]:
    	fileNo = int(sys.argv[3])
    	dirNo = int(sys.argv[4])
except:
    fileNo = 0
    dirNo = 0

def write_(path_):
    """ If you want to test this script use this to write some dummy files """
    for x in xrange(1991,1995):
        directory_ = "%s/%s" % (path_, x)
        if not os.path.exists(directory_):
            print directory_
            os.makedirs(directory_)
            for y in xrange(1,699):
    		
        	        newfile_ = "%s/new_and-%s.txt" % (directory_, y)
        	        print newfile_
        	        filenew_=open(newfile_, "w")
        		newline="<APS_word pos=\nbla\ntesty stuff<\APS>"
			                   
                        filenew_.write(newline)
                        filenew_.close() 
	
#write_(path_)



def filesTakeTwo(path_, fileNo, dirNo):
    smallList=[] 
    bigList=[]
    for root, dirs, files in os.walk(path_):
        for filename in fnmatch.filter(files, pattern):
            theFile = os.path.join(root, filename)
            smallList.append(theFile)
            type_tag = re.compile('^.*?((19|20)\d{2})').search(theFile)
	    if type_tag:
	    	smallList.append(type_tag.group(1))

            string_ = string.split(theFile, "/")
            str_len = len(string_)
            str_len = str_len - 1
            thefile_ = string_[str_len]
            smallList.append(thefile_)
            
            
            file_ = re.compile(r'(_|-|/)(\d+).txt$').search(theFile)
            if file_:
                file = file_.group(2)
                file = int(file)
                file = '%05d' % file
                smallList.append(file)
  
	    bigList.append(smallList)
    	    smallList = []    

    dirSendOut = "%s/send_out" % path_    	    
    if not os.path.exists(dirSendOut):
        os.makedirs(dirSendOut)
    
    tmpFile = "%s/tmp.txt" % dirSendOut
    with open(tmpFile, "w") as filetmp_: 
    
#	""" Sort the information and look at the first year """
	bigList = sorted(bigList, key=itemgetter(1, 3))
	prevYear = bigList[0][1]
	
#	"""Create initial directories before loop starts"""
	filetmp_.write("mkdir %s/send_out/%s\n" % (path_, prevYear))
	year1Dir = "%s/send_out/%s" % (path_, prevYear)
	if not os.path.exists(year1Dir):
            os.makedirs(year1Dir)
        
	filetmp_.write("mkdir %s/send_out/%s/0000\n" % (path_, prevYear))
	sub1Dir = "%s/send_out/%s/%04d" % (path_, prevYear, dirNo)
	if not os.path.exists(sub1Dir):
            os.makedirs(sub1Dir)
	
	""" Process the data """
	for line in sorted(bigList, key=itemgetter(1, 3)):

	    year_ = line[1]
	    
#	    """ Are we working with files from the current year? """
	    if year_ == prevYear:
#	        """ Where are we with file numbers? We only want files numbered 0-99 in each subdirectory """
		if fileNo < 100:
		    filetmp_.write("cp %s %s/send_out/%s/%04d/%06d.%s\n" % (line[0], path_, year_, dirNo, fileNo, sys.argv[2]))
		    fileSrcA = line[0]
		    fileDestA = "%s/send_out/%s/%04d/%06d.%s" % (path_, year_, dirNo, fileNo, sys.argv[2])
		    shutil.copyfile(fileSrcA, fileDestA)
		    fileNo = fileNo + 1
		       
		else:
		    fileNo = 0
		    dirNo = dirNo+1
		    filetmp_.write("mkdir %s/send_out/%s/%04d\n" % (path_, year_, dirNo))
		    subDir = "%s/send_out/%s/%04d" % (path_, year_, dirNo)
		    if not os.path.exists(subDir):
            		os.makedirs(subDir)
		    filetmp_.write("cp %s %s/send_out/%s/%04d/%06d.%s\n" % (line[0], path_, year_, dirNo, fileNo, sys.argv[2]))
		    fileSrcB = line[0]
		    fileDestB = "%s/send_out/%s/%04d/%06d.%s" % (path_, year_, dirNo, fileNo, sys.argv[2])
		    shutil.copyfile(fileSrcB, fileDestB)
		    fileNo = fileNo + 1
	    
#	    """ If the years change reset filenames and directories and create the new directories and the first new file """
	    else:
	        filetmp_.write("mkdir %s/send_out/%s\n" % (path_, year_))
	        yearSubDir = "%s/send_out/%s" % (path_, year_)
		if not os.path.exists(yearSubDir):
            	    os.makedirs(yearSubDir)
	        filetmp_.write("mkdir %s/send_out/%s/0000\n" % (path_, year_))
	        newSubDir = "%s/send_out/%s/0000" % (path_, year_)
		if not os.path.exists(newSubDir):
            	    os.makedirs(newSubDir)
	        fileNo = 0
	        dirNo = 0
	        filetmp_.write("cp %s %s/send_out/%s/%04d/%06d.%s\n" % (line[0], path_, year_, dirNo, fileNo, sys.argv[2]))
	        firstFileSrc = line[0]
		firstFileDest = "%s/send_out/%s/%04d/%06d.%s" % (path_, year_, dirNo, fileNo, sys.argv[2])
		shutil.copyfile(firstFileSrc, firstFileDest)
	        fileNo = fileNo + 1
	        prevYear = year_
		
if __name__ == "__main__":		
		
    filesTakeTwo(path_, fileNo, dirNo)	


#!/usr/local/bin/python2.6
# -*- mode: python -*-

import sys, os
sys.path.append(os.path.join(os.path.dirname(__file__) + '/../lib/python'))

'''
Currently, the Vogue Collection data is handed over from Apex in an unpredictable
structure which causes problems inhouse for processing and handing over.

The purpose of this script is to tidy up the Apex handover data so that we have
a consistent and manageable structure for all stages of the processing.

LMITATIONS:

Due to the enormous size of the data set, and the limited amount of storage 
available to accommodate it, we are not able to copy the data out of the Apex
handover and create a free-standing copy. Therefore, we need to walk through 
the Apex data, selectively moving data that breaks our preferred format, while
still rooted within the Apex structure.

Our preferred structure is {year}/{month}/<xml,jpeg,tiff>/, but in some cases,
the data coming from Apex has an additional level after {month}: 

{year}/{month}/{day}/<xml,jpeg,tiff>/

We need to move everyhting under {day} up a level.

Possible approaches.

1) Inspect the file path for each file in the tree. If it contains three 
   consecutive numeric elements, move files. 

2) Inspect the file path. We know that after the {year}/{month} components,
   we should see xml, jpeg and tiff subdirectories. If we see anything numerical
   instead, or as well, ensure we have the three we want, and move the contents
   of the others in to the correct place.

'''

import shutil
from optparse import OptionParser, OptionValueError
import fnmatch

try:
    rootDir = sys.argv[1]
except IndexError:
    print >> sys.stderr, "flattenvogue </path/to/data>"
    exit(1)

# fstLvl is the year
for fstLvl in sorted(fnmatch.filter(os.listdir(rootDir), '[12][0-9][0-9][0-9]')):
    fstLvlAbs = os.path.join(rootDir, fstLvl)
    # month
    for sndLvl in sorted(fnmatch.filter(os.listdir(fstLvlAbs), '[01][0-9]')):
        sndLvlAbs = os.path.join(fstLvlAbs, sndLvl)
        for subd in ['xml', 'jpeg', 'tiff']:
            if not subd in os.listdir(sndLvlAbs):
                os.mkdir(os.path.join(sndLvlAbs, subd))
        for thdLvl in sorted(fnmatch.filter(os.listdir(sndLvlAbs), '[0-3][0-9]')):
        # should be one of xml, jpeg or tiff. If it's a number, it's wrong.
            thdLvlAbs = os.path.join(sndLvlAbs, thdLvl)
            # one of xml, jpeg, tiff
            for fthLvl in os.listdir(thdLvlAbs):
                fthLvlAbs = os.path.join(thdLvlAbs, fthLvl)
                for file in os.listdir(fthLvlAbs):
                    srcFile = os.path.join(fthLvlAbs, file)
                    dstDir = os.path.join(sndLvlAbs, fthLvl)
                    dstFile = os.path.join(dstDir, file)
                    print "Copy %s to %s" % (srcFile, dstDir)
                    shutil.move(srcFile, dstFile)
            shutil.rmtree(thdLvlAbs)

#!/usr/local/bin/python2.6

import site
site.addsitedir('/packages/dsol/lib/python2.6/site-packages')
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__) + '/../lib/python'))
from os import getpid
from hansard.hansard_member import *
from crash_reporter import *
import multiprocessing
from multiprocessing import Pool

funclist=[]
xg=''

def worker_process(filename):
    hm = mp()
    fname = os.path.basename(filename) 
    print  getpid(),': ',xg+'/'+fname
    time.sleep(2)
    result_list = hm.match(filename, funclist, xg)    
    return result_list
    
if __name__ == '__main__':
    
    er=error_reporter()
    er.mail_recipient=['Arsene.Medafe@proquest.co.uk']
    sys.excepthook = er.unhandled_exception
    start = datetime.datetime.now()
    print 'Matching members'
    mpdb=open('/dc/hcpp/hansard/MPs_database/MPs_final.xml','rU')
    readmpdb = mpdb.read().decode('latin-1')
    mpdb.close()
    funcrgx = re.compile('<officeName>(.*?)</officeName>')
    allfunc = funcrgx.findall(readmpdb)
    for func in allfunc:
        if func not in funclist:
            funclist.append(func.lower())
    
    for xg in sys.argv[1:]: 
        print '\n', xg,'\n'
        sourcepath=glob.glob('/dc/hcpp/hansard/original_master_data/'+xg+'/*_proc2.xml')
        duplog=open('/dc/hcpp/hansard/original_master_data/new_series_exp/'+xg+'/ambiguous_cases.log','w')
        notone=open('/dc/hcpp/hansard/original_master_data/new_series_exp/'+xg+'/no_match.log','w')
        mtc=open('/dc/hcpp/hansard/original_master_data/new_series_exp/'+xg+'/match.log','w')
        #up to 18 processes at a time
        workers = (multiprocessing.cpu_count() / 4) * 3
        cpu_pool = multiprocessing.Pool(workers)
        result = cpu_pool.map(worker_process, sorted(sourcepath), )
        for entry in result:
            #ambiguous matches:
            if entry[1] != [] or entry[3] != '':
                duplog.write('\n\n                           ' + entry[0] + entry[3] + '\n\n')
                for ln in entry[1]:
                    duplog.write(ln.encode('latin-1') + '\n')
                duplog.write('\n\n')
            #no match
            if entry[2] != []:
                nomatch = list(set(entry[2]))
                notone.write('\n\n                           ' + entry[0] + '\n\n')
                for nm in nomatch:
                    notone.write(nm.encode('latin-1') + '\n') 
            #matches
            if entry[4] != []:
                mtc.write('\n\n                           ' + entry[0] + '\n\n')
                for ln in entry[4]:
                    mtc.write(ln)        
        cpu_pool.close()
        cpu_pool.join()
    end = datetime.datetime.now()
    elapsed = end-start
    print 'Start: ', start
    print 'End: ', end
    print 'Elapsed', elapsed
    
    
    
    

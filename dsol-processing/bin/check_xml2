#!/usr/local/bin/python2.6
# -*- mode: python -*-
import os, sys
from os.path import join
import datetime
import multiprocessing
from multiprocessing import Pool
#from os import getpid
sys.path.append(os.path.join(os.path.dirname(__file__) + '/../lib/python'))
from  xml_validation_check import *


read_cfg = ''
encoding=''
def worker_process(name):
    result_list = []
    #print name, 'PID: ', getpid()
    print name
    errorlist = []
    a = Validation()
    #we have a configuration file
    if os.path.isfile('xml.cfg'):
        a.tagfuncs = eval(read_cfg)
        
    error_list = a.check_file(name,encoding)
    if error_list:
        error_list.insert(0, name + ':')
        result_list.append('\n'.join(x for x in error_list) + '\n-------------------------\n')
    return ''.join(x for x in result_list)
                

if __name__ == '__main__':
    if len(sys.argv) == 2:
        encoding=sys.argv[1]
    else:
        encoding='utf-8'
    #remove any previous validation log
    if os.path.isfile('./validation.log'):
        os.remove('validation.log') 
    error_log=open('validation.log','w')
    #have we a configuration file?
    if os.path.isfile('xml.cfg'):
        open_cfg = open('xml.cfg', 'rU')
        read_cfg = open_cfg.read()
        read_cfg = read_cfg.replace('self', 'a')
    start = datetime.datetime.now()
    allfilles = []
    load = []
    #allfilles=(os.path.join(path,name) for path,dirs,files in os.walk('./')  for name in sorted(files))
    print "Please wait , loading path to files in memory...this may take a few minutes" 
    for (path, dirs, files) in os.walk('./'):
        dirs.sort()
        for name in sorted(files):
            fullname = os.path.join(path, name)
            allfilles.append(fullname)
    for f in allfilles:
        if f.find('.xml') != -1:
            load.append(f)
    if load:
        workers = (multiprocessing.cpu_count() / 4) * 3
        cpu_pool = multiprocessing.Pool(workers)
        result = cpu_pool.map(worker_process, load, )
        if result[0] != None:
            for report in result:
                if report != '':
                    error_log.write(report.encode('latin-1') + '\n')  
        cpu_pool.close()
        cpu_pool.join()  
    end = datetime.datetime.now()
    elapsed = end-start
    print 'Start: ', start
    print 'End: ', end
    print 'Elapsed', elapsed
 
 

#!/usr/local/bin/python2.6
import re
import os
import fnmatch
import sys
from operator import itemgetter
sys.path.insert(0, "/packages/dsol/lib/python")
from lutbuilder import buildLut
import string
import shutil

if (len(sys.argv) > 3):
    if len(sys.argv) == 1:
        print "Please enter at least 3 options to run or copyrem for help"

else:
    print "Usage: sort_file option1 option2 option3"
    print "Option 1: Full path to files eg: /dc/pao/pcift0/wherever/somewhere/h310"
    print "Option 2: File extension. Eg. old or txt"
    print "Option 3: Copyright stamp to be removed: Eg: \"Copyright (c) 2003 ProQuest Information and Learning Company\""
    print "The script will backup all files as .bkp files"
    exit()
    
path_= sys.argv[1]
pattern = "*.%s" % sys.argv[2]
ccStamp = sys.argv[3] 

ccClean = string.replace(ccStamp, '(c)', '\(c\)')
ccClean = ccClean.split( );
ccStatement = "(.*?)"
for line in ccClean:
    ccStatement = '%s<APS_word pos="\d+,\d+,\d+,\d+">%s</APS_word>' % (ccStatement, line)

ccStatement = "%s(.*?)$" % ccStatement
print ccStatement

def sortFiles(path_):
    smallList=[] 
    bigList=[]
    fileContent = ""
    for root, dirs, files in os.walk(path_):
        
        for filename in fnmatch.filter(files, pattern):
            theFile = os.path.join(root, filename)
            fileContent = "%s/%s|" % (root, filename[:-4])
            with  open(theFile, "r") as filenew_:
	    	for line in filenew_:
	    	    line = line.strip()
	            fileContent="%s%s" % (fileContent, line)
	        newFile = "%s.bkp" % (theFile)
	        shutil.move(theFile, newFile)    
            smallList.append(fileContent)
	    bigList.append(fileContent)
            fileContent = ""
    	    smallList = []
    	    
	    
    tmpFile = "%s/tmp" % path_  
    with open(tmpFile, "w") as filenew_:
        for line in bigList:
            line = "%s\n" % line
            filenew_.write(line)	    

    my_dict = buildLut(tmpFile, delimiter="|")
    
    
    for key, value in my_dict.items(): 
        
        file_ = "%s.%s" % (key, sys.argv[2])
        theNewFile = os.path.join(root, file_)
        with open(theNewFile, "w") as newFile:
            ccMatch = re.match(ccStatement, value)
            if ccMatch:
                ccMatchPart1 = "%s" % ccMatch.group(1)
                ccMatchPart2 = "%s%s\n" % (ccMatchPart1, ccMatch.group(2))
                ccMatchPart2 = string.replace(ccMatchPart2, '</APS_word>', '</APS_word>\n')
                newFile.write(ccMatchPart2)
	    else:
	        print "Match not found!"
if __name__ == "__main__":

    sortFiles(path_)


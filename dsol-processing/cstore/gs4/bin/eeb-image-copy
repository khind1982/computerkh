#!/usr/local/bin/bash

DELIVERYLIST="$(dirname $0)/../libdata/eeb/eurobo_all_deliveries.txt"

function usage() {
    echo "$0 collection_id book_id..."
    echo "$0 collection_id file"
}

# Find the bookid in the delivery list file so we know where to copy from
function find_book_src() {
    local book src
    book=$1

    src=$(grep $book $DELIVERYLIST)
    echo $src
}

function book_to_path() {
    # Convert a book id to a file path by changing - to /
    local book
    book=$1
    echo ${book//-/\/}
}

function check_img() {
    # Check that the passed image path exists. Write a warning if not.
    if ! [ -f "$1" ]
    then
        echo "WARNING: $1 does not exist"
    fi
}

function processed_dir() {
    # Return the Processed directory for the given book.
    local src
    src=$1
    src=$(echo ${src/Incoming/Processed} | awk -F/ '{print "/"$2"/"$3"/"$4"/"$5}')
    echo $src
}

function zipped_dir() {
    # Return the Zipped directory for the given book.
    local src processed
    src=$1
    processed=$(processed_dir $src)
    echo ${processed/Processed/Zipped}
}

# Copy the jpeg images, if necessary
function do_copy_jpegs() {
    local collection src jpeg_path processed
    collection=$1
    src=$2
    processed=$(processed_dir $src)
    parts=("${src}/"*)
    for part in ${parts[*]}
    do
        basepart=$(basename $part)
        jpeg_path="/images/eurobo/jpeg/${collection}/$(book_to_path $basepart)"
        if ! [ -d "${jpeg_path}" ]
        then
            mkdir -p "${jpeg_path}"
        fi
        for img_path in "$part/"*.jp2
        do
            img="$processed/$(basename ${img_path%.jp2})"
            img_j="${img}.jpg"        # The original jpeg
            img_t="${img}.thumb.jpg"  # thumbnail
            img_96="${img}_96.jpg"    # 96 px
            img_300="${img}_300.jpg"  # 300 px
            for img in $img_j $img_t $img_96 $img_300
            do
                check_img $img
            done
            cp "$img_j" "$img_t" "$img_96" "$img_300" "$jpeg_path"
        done
    done
}

function do_copy_zoomify() {
    local collection src zoom_path processed zipped parts part
    collection=$1
    src=$2

    processed=$(processed_dir $src)
    zipped=$(zipped_dir $src)
    parts=("${src}/"*)
    for part in ${parts[*]}
    do
        basepart=$(basename $part)
        live_path="/images/eurobo/zoomify/${collection}/$(book_to_path $basepart)"
        if [ -d "${live_path}" ]
        then            
            mv "${live_path}" "${live_path}.replaced"
            echo "Need to delete ${live_path}.replaced"
        fi
        mkdir -p "${live_path}"
        cd $live_path
        for img_path in "$part/"*.jp2
        do
            img_base=$(basename ${img_path%.jp2})
            if [ ! -f "${processed}/${img_base}/ImageProperties.xml" ]
            then
                echo "ERROR: Failed zoomify ${processed}/${img_base}"
            fi
            if [ ! -d "$zipped/$img_base.zip" ]
            then
                unzip -q "$zipped/$img_base.zip"
            else
                cp -r "$processed/$img_base" "$live_path"
            fi
        done
    done
}

function do_copy() {
    local book collection src
    collection=$1
    book=$2

    echo $book
    
    src=$(find_book_src $book)
    do_copy_jpegs $collection $src
    do_copy_zoomify $collection $src
}

case $# in
    0|1)
        usage
        exit
        ;;
    2)
        COLLECTION=$1
        # If the second arg is a file, read its contents as book ids to copy
        if [ -f $2 ]
        then
            while read book
            do
                do_copy $COLLECTION $book
            done < $2
        else
            # Otherwise, it's just a book id.
            do_copy $COLLECTION $2
        fi
        ;;
    *)
        COLLECTION=$1
        shift
        for book in "$@"
        do
            do_copy $COLLECTION $book
        done
        ;;
esac

